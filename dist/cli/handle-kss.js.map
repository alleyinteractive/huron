{"version":3,"sources":["../../src/cli/handle-kss.js"],"names":["path","require","fs","parse","chalk","kssHandler","updateKSS","filepath","store","kssSource","readFileSync","huron","get","oldSection","getSection","file","newStore","styleguide","data","sections","length","section","normalizeSectionData","updateSectionData","referenceURI","unsetSection","console","log","green","magenta","deleteKSS","red","kssPath","sectionFileInfo","dataFilepath","join","dir","name","isInline","markup","match","newSort","sortSection","getIn","reference","newSection","Object","assign","updateInlineTemplate","removeFile","updateTemplateFields","updateDescription","sectionPath","writeSectionData","setIn","fieldShouldOutput","templatePath","writeFile","templateContent","descriptionPath","description","format","oldFilepath","forEach","field","deleteTemplate","updateTemplate","removed","sorted","unsortSection","deleteIn","delimiter","parts","split","newSorted","newParts","filter","part","idx","subsections","keys"],"mappings":"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","file":"handle-kss.js","sourcesContent":["/** @module cli/kss-handler */\n\nimport { utils } from './utils';\nimport { templateHandler } from './handle-templates';\nimport { writeStore } from './require-templates';\n\nconst path = require('path');\nconst fs = require('fs-extra');\nconst parse = require('kss').parse;\nconst chalk = require('chalk'); // Colorize terminal output\n\n/* eslint-disable */\nexport const kssHandler = {\n/* eslint-enable */\n\n  /**\n   * Handle update of a KSS section\n   *\n   * @function updateKSS\n   * @param {string} filepath - filepath of changed file (comes from gaze)\n   * @param {object} store - memory store\n   */\n  updateKSS(filepath, store) {\n    const kssSource = fs.readFileSync(filepath, 'utf8');\n    const huron = store.get('config');\n    const oldSection = utils.getSection(filepath, false, store) || {};\n    const file = path.parse(filepath);\n    let newStore = store;\n\n    if (kssSource) {\n      const styleguide = parse(kssSource, huron.get('kssOptions'));\n\n      if (styleguide.data.sections.length) {\n        const section = utils.normalizeSectionData(\n          styleguide.data.sections[0]\n        );\n\n        // Update or add section data\n        newStore = kssHandler.updateSectionData(\n          filepath,\n          section,\n          oldSection,\n          newStore\n        );\n\n        // Remove old section data if reference URI has changed\n        if (oldSection &&\n          oldSection.referenceURI &&\n          oldSection.referenceURI !== section.referenceURI\n        ) {\n          newStore = this.unsetSection(oldSection, file, newStore, false);\n        }\n\n        writeStore(newStore);\n        console.log(\n          chalk.green(\n            `KSS source in ${filepath} changed or added`\n          )\n        );\n        return newStore;\n      }\n\n      console.log(chalk.magenta(`No KSS found in ${filepath}`));\n      return newStore;\n    }\n\n    if (oldSection) {\n      newStore = kssHandler.deleteKSS(filepath, oldSection, newStore);\n    }\n\n    console.log(chalk.red(`${filepath} not found or empty`)); // eslint-disable-line no-console\n    return newStore;\n  },\n\n  /**\n   * Handle removal of a KSS section\n   *\n   * @function deleteKSS\n   * @param {string} filepath - filepath of changed file (comes from gaze)\n   * @param {object} section - KSS section data\n   * @param {object} store - memory store\n   */\n  deleteKSS(filepath, section, store) {\n    const file = path.parse(filepath);\n\n    // Remove section data from memory store\n    return kssHandler.unsetSection(section, file, store, true);\n  },\n\n  /**\n   * Update the sections store with new data for a specific section\n   *\n   * @function updateSectionData\n   * @param {object} section - contains updated section data\n   * @param {string} kssPath - path to KSS section\n   * @param {object} store - memory store\n   */\n  updateSectionData(kssPath, section, oldSection, store) {\n    const sectionFileInfo = path.parse(kssPath);\n    const dataFilepath = path.join(\n      sectionFileInfo.dir,\n      `${sectionFileInfo.name}.json`\n    );\n    const isInline = null !== section.markup.match(/<\\/[^>]*>/);\n    const newSort = kssHandler.sortSection(\n      store.getIn(['sections', 'sorted']),\n      section.reference,\n      store.get('referenceDelimiter')\n    );\n    const newSection = Object.assign({}, oldSection, section);\n    let newStore = store;\n\n    // Required for reference from templates and data\n    newSection.kssPath = kssPath;\n\n    if (isInline) {\n      // Set section value if inlineTempalte() returned a path\n      newStore = kssHandler.updateInlineTemplate(\n        kssPath,\n        oldSection,\n        newSection,\n        newStore\n      );\n    } else {\n      // Remove inline template, if it exists\n      utils.removeFile(\n        newSection.referenceURI,\n        'template',\n        kssPath,\n        store\n      );\n      // Update markup and data fields\n      newStore = kssHandler.updateTemplateFields(\n        sectionFileInfo,\n        oldSection,\n        newSection,\n        newStore\n      );\n    }\n\n    // Output section description\n    newStore = kssHandler.updateDescription(\n      kssPath,\n      oldSection,\n      newSection,\n      newStore\n    );\n\n    // Output section data to a JSON file\n    newSection.sectionPath = utils.writeSectionData(\n      newStore,\n      newSection,\n      dataFilepath\n    );\n\n    // Update section sorting\n    return newStore\n      .setIn(\n        ['sections', 'sorted'],\n        newSort\n      )\n      .setIn(\n        ['sections', 'sectionsByPath', kssPath],\n        newSection\n      )\n      .setIn(\n        ['sections', 'sectionsByURI', section.referenceURI],\n        newSection\n      );\n  },\n\n  /**\n   * Handle detection and output of inline templates, which is markup written\n   * in the KSS documentation itself as opposed to an external file\n   *\n   * @function updateInlineTemplate\n   * @param {string} oldSection - previous iteration of KSS data, if updated\n   * @param {object} section - KSS section data\n   * @return {object} updated memory store with new template path info\n   */\n  updateInlineTemplate(filepath, oldSection, section, store) {\n    const newSection = section;\n    const newStore = store;\n\n    // If we have inline markup\n    if (this.fieldShouldOutput(oldSection, section, 'markup')) {\n      newSection.templatePath = utils.writeFile(\n        section.referenceURI,\n        'template',\n        filepath,\n        section.markup,\n        store\n      );\n      newSection.templateContent = section.markup;\n\n      return newStore\n        .setIn(\n          ['sections', 'sectionsByPath', filepath],\n          newSection\n        )\n        .setIn(\n          ['sections', 'sectionsByURI', section.referenceURI],\n          newSection\n        );\n    }\n\n    return newStore;\n  },\n\n  /**\n   * Handle output of section description\n   *\n   * @function updateDescription\n   * @param {string} oldSection - previous iteration of KSS data, if updated\n   * @param {object} section - KSS section data\n   * @return {object} updated memory store with new descripton path info\n   */\n  updateDescription(filepath, oldSection, section, store) {\n    const newSection = section;\n    const newStore = store;\n\n    // If we don't have previous KSS or the KSS has been updated\n    if (this.fieldShouldOutput(oldSection, section, 'description')) {\n      // Write new description\n      newSection.descriptionPath = utils.writeFile(\n        section.referenceURI,\n        'description',\n        filepath,\n        section.description,\n        store\n      );\n\n      return newStore\n        .setIn(\n          ['sections', 'sectionsByPath', filepath],\n          newSection\n        )\n        .setIn(\n          ['sections', 'sectionsByURI', section.referenceURI],\n          newSection\n        );\n    }\n\n    return newStore;\n  },\n\n  /**\n   * Handle Data and Markup fields\n   *\n   * @function updateTemplateFields\n   * @param {string} file - File data for KSS file from path.parse()\n   * @param {object} oldSection - outdated KSS data\n   * @param {object} section - KSS section data\n   * @param {object} store - memory store\n   * @return {object} KSS section data with updated asset paths\n   */\n  updateTemplateFields(file, oldSection, section, store) {\n    const kssPath = path.format(file);\n    const newSection = section;\n    let filepath = '';\n    let oldFilepath = '';\n    let newStore = store;\n\n    ['data', 'markup'].forEach((field) => {\n      if (newSection[field]) {\n        if (oldSection[field]) {\n          oldFilepath = path.join(file.dir, oldSection[field]);\n          newStore = templateHandler.deleteTemplate(\n            oldFilepath,\n            oldSection,\n            newStore\n          );\n        }\n\n        filepath = path.join(file.dir, newSection[field]);\n        newStore = templateHandler.updateTemplate(\n          filepath,\n          newSection,\n          newStore\n        );\n      } else {\n        delete newSection[field];\n        newStore = newStore\n          .setIn(\n            ['sections', 'sectionsByPath', kssPath],\n            newSection\n          )\n          .setIn(\n            ['sections', 'sectionsByURI', newSection.referenceURI],\n            newSection\n          );\n      }\n    });\n\n    return newStore;\n  },\n\n  /**\n   * Remove a section from the memory store\n   *\n   * @function unsetSection\n   * @param {object} section - contains updated section data\n   * @param {string} file - file object from path.parse()\n   * @param {object} store - memory store\n   * @param {bool} removed - has the file been removed or just the section information changed?\n   */\n  unsetSection(section, file, store, removed) {\n    const sorted = store.getIn(['sections', 'sorted']);\n    const kssPath = path.format(file);\n    const dataFilepath = path.join(file.dir, `${file.name}.json`);\n    const isInline = section.markup &&\n      null !== section.markup.match(/<\\/[^>]*>/);\n    const newSort = kssHandler.unsortSection(\n      sorted,\n      section.reference,\n      store.get('referenceDelimiter')\n    );\n    let newStore = store;\n\n    // Remove old section data\n    utils.removeFile(\n      section.referenceURI,\n      'section',\n      dataFilepath,\n      newStore\n    );\n\n     // Remove associated inline template\n    if (isInline) {\n      utils.removeFile(section.referenceURI, 'template', kssPath, newStore);\n    }\n\n    // Remove description template\n    utils.removeFile(section.referenceURI, 'description', kssPath, newStore);\n\n    // Remove data from sectionsByPath if file has been removed\n    if (removed) {\n      newStore = newStore.deleteIn(['sections', 'sectionsByPath', kssPath]);\n    }\n\n    return newStore\n      .deleteIn(['sections', 'sectionsByURI', section.referenceURI])\n      .setIn(['sections', 'sorted'], newSort);\n  },\n\n  /**\n   * Sort sections and subsections\n   *\n   * @function sortSection\n   * @param {object} sorted - currently sorted sections\n   * @param {string} reference - reference URI of section to sort\n   */\n  sortSection(sorted, reference, delimiter) {\n    const parts = reference.split(delimiter);\n    const newSort = sorted[parts[0]] || {};\n    const newSorted = sorted;\n\n    if (1 < parts.length) {\n      const newParts = parts.filter((part, idx) => 0 !== idx);\n      newSorted[parts[0]] = kssHandler.sortSection(\n        newSort,\n        newParts.join(delimiter),\n        delimiter\n      );\n    } else {\n      newSorted[parts[0]] = newSort;\n    }\n\n    return newSorted;\n  },\n\n  /**\n   * Remove a section from the sorted sections\n   *\n   * @function unsortSection\n   * @param {object} sorted - currently sorted sections\n   * @param {string} reference - reference URI of section to sort\n   */\n  unsortSection(sorted, reference, delimiter) {\n    const parts = reference.split(delimiter);\n    const subsections = Object.keys(sorted[parts[0]]);\n    const newSorted = sorted;\n\n    if (subsections.length) {\n      if (1 < parts.length) {\n        const newParts = parts.filter((part, idx) => 0 !== idx);\n        newSorted[parts[0]] = kssHandler.unsortSection(\n          newSorted[parts[0]],\n          newParts.join(delimiter),\n          delimiter\n        );\n      }\n    } else {\n      delete newSorted[parts[0]];\n    }\n\n    return newSorted;\n  },\n\n  /**\n   * Compare a KSS field between old and new KSS data to see if we need to output\n   * a new module for that field\n   *\n   * @function fieldShouldOutput\n   * @param {object} oldSection - currently sorted sections\n   * @param {object} newSection - reference URI of section to sort\n   * @param {string} field - KSS field to check\n   */\n  fieldShouldOutput(oldSection, newSection, field) {\n    return (oldSection &&\n        (oldSection[field] !== newSection[field] ||\n        oldSection.referenceURI !== newSection.referenceURI)\n      ) ||\n      ! oldSection;\n  },\n};\n"]}