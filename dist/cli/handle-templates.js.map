{"version":3,"sources":["../../src/cli/handle-templates.js"],"names":["path","require","fs","chalk","templateHandler","updateTemplate","filepath","section","store","file","parse","pairPath","getTemplateDataPair","type","ext","newSection","newStore","content","readFileSync","e","console","log","red","requirePath","writeFile","referenceURI","templateContent","sectionPath","writeSectionData","setIn","kssPath","deleteTemplate","removeFile","deleteIn"],"mappings":";;;;;;;AACA;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb,C,CAHA;;AAIA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA;AACO,IAAMG,4CAAkB;AAC/B;AACE;;;;;;;;;AASAC,gBAX6B,0BAWdC,QAXc,EAWJC,OAXI,EAWKC,KAXL,EAWY;AACvC,QAAMC,OAAOT,KAAKU,KAAL,CAAWJ,QAAX,CAAb;AACA,QAAMK,WAAW,aAAMC,mBAAN,CAA0BH,IAA1B,EAAgCF,OAAhC,EAAyCC,KAAzC,CAAjB;AACA,QAAMK,OAAO,YAAYJ,KAAKK,GAAjB,GAAuB,MAAvB,GAAgC,UAA7C;AACA,QAAMC,aAAaR,OAAnB;AACA,QAAMS,WAAWR,KAAjB;AACA,QAAIS,UAAU,KAAd;;AAEA,QAAI;AACFA,gBAAUf,GAAGgB,YAAH,CAAgBZ,QAAhB,EAA0B,MAA1B,CAAV;AACD,KAFD,CAEE,OAAOa,CAAP,EAAU;AACVC,cAAQC,GAAR,CAAYlB,MAAMmB,GAAN,CAAahB,QAAb,qBAAZ;AACD;;AAED,QAAIW,OAAJ,EAAa;AACX,UAAMM,cAAc,aAAMC,SAAN,CAClBT,WAAWU,YADO,EAElBZ,IAFkB,EAGlBP,QAHkB,EAIlBW,OAJkB,EAKlBD,QALkB,CAApB;AAOAD,iBAAcF,IAAd,aAA4BU,WAA5B;;AAEA,UAAI,eAAeV,IAAnB,EAAyB;AACvBE,mBAAWW,eAAX,GAA6BT,OAA7B;;AAEA;AACAF,mBAAWY,WAAX,GAAyB,aAAMC,gBAAN,CAAuBZ,QAAvB,EAAiCD,UAAjC,CAAzB;AACD;;AAED,aAAOC,SACJa,KADI,CAEH,CAAC,WAAD,EAAcN,WAAd,CAFG,EAGHZ,QAHG,EAKJkB,KALI,CAMH,CAAC,UAAD,EAAa,gBAAb,EAA+Bd,WAAWe,OAA1C,CANG,EAOHf,UAPG,EASJc,KATI,CAUH,CAAC,UAAD,EAAa,eAAb,EAA8Bd,WAAWU,YAAzC,CAVG,EAWHV,UAXG,CAAP;AAaD;;AAED,WAAOC,QAAP;AACD,GA1D4B;;;AA4D7B;;;;;;;;;AASAe,gBArE6B,0BAqEdzB,QArEc,EAqEJC,OArEI,EAqEKC,KArEL,EAqEY;AACvC,QAAMC,OAAOT,KAAKU,KAAL,CAAWJ,QAAX,CAAb;AACA,QAAMO,OAAO,YAAYJ,KAAKK,GAAjB,GAAuB,MAAvB,GAAgC,UAA7C;AACA,QAAMC,aAAaR,OAAnB;AACA,QAAMS,WAAWR,KAAjB;;AAEA;AACA,QAAMe,cAAc,aAAMS,UAAN,CAClBjB,WAAWU,YADO,EAElBZ,IAFkB,EAGlBP,QAHkB,EAIlBU,QAJkB,CAApB;AAMA,WAAOD,WAAcF,IAAd,UAAP;;AAEA,WAAOG,SACJiB,QADI,CACK,CAAC,WAAD,EAAcV,WAAd,CADL,EAEJM,KAFI,CAGH,CAAC,UAAD,EAAa,gBAAb,EAA+Bd,WAAWe,OAA1C,CAHG,EAIHf,UAJG,EAMJc,KANI,CAOH,CAAC,UAAD,EAAa,eAAb,EAA8Bd,WAAWU,YAAzC,CAPG,EAQHV,UARG,CAAP;AAUD;AA9F4B,CAAxB","file":"handle-templates.js","sourcesContent":["/** @module cli/template-handler */\nimport { utils } from './utils';\n\nconst path = require('path');\nconst fs = require('fs-extra');\nconst chalk = require('chalk');\n\n/* eslint-disable */\nexport const templateHandler = {\n/* eslint-enable */\n  /**\n   * Handle update of a template or data (json) file\n   *\n   * @function updateTemplate\n   * @param {string} filepath - filepath of changed file (comes from gaze)\n   * @param {object} section - contains KSS section data\n   * @param {object} store - memory store\n   * @return {object} updated memory store\n   */\n  updateTemplate(filepath, section, store) {\n    const file = path.parse(filepath);\n    const pairPath = utils.getTemplateDataPair(file, section, store);\n    const type = '.json' === file.ext ? 'data' : 'template';\n    const newSection = section;\n    const newStore = store;\n    let content = false;\n\n    try {\n      content = fs.readFileSync(filepath, 'utf8');\n    } catch (e) {\n      console.log(chalk.red(`${filepath} does not exist`));\n    }\n\n    if (content) {\n      const requirePath = utils.writeFile(\n        newSection.referenceURI,\n        type,\n        filepath,\n        content,\n        newStore\n      );\n      newSection[`${type}Path`] = requirePath;\n\n      if ('template' === type) {\n        newSection.templateContent = content;\n\n        // Rewrite section data with template content\n        newSection.sectionPath = utils.writeSectionData(newStore, newSection);\n      }\n\n      return newStore\n        .setIn(\n          ['templates', requirePath],\n          pairPath\n        )\n        .setIn(\n          ['sections', 'sectionsByPath', newSection.kssPath],\n          newSection\n        )\n        .setIn(\n          ['sections', 'sectionsByURI', newSection.referenceURI],\n          newSection\n        );\n    }\n\n    return newStore;\n  },\n\n  /**\n   * Handle removal of a template or data (json) file\n   *\n   * @function deleteTemplate\n   * @param {string} filepath - filepath of changed file (comes from gaze)\n   * @param {object} section - contains KSS section data\n   * @param {object} store - memory store\n   * @return {object} updated memory store\n   */\n  deleteTemplate(filepath, section, store) {\n    const file = path.parse(filepath);\n    const type = '.json' === file.ext ? 'data' : 'template';\n    const newSection = section;\n    const newStore = store;\n\n    // Remove partner\n    const requirePath = utils.removeFile(\n      newSection.referenceURI,\n      type,\n      filepath,\n      newStore\n    );\n    delete newSection[`${type}Path`];\n\n    return newStore\n      .deleteIn(['templates', requirePath])\n      .setIn(\n        ['sections', 'sectionsByPath', newSection.kssPath],\n        newSection\n      )\n      .setIn(\n        ['sections', 'sectionsByURI', newSection.referenceURI],\n        newSection\n      );\n  },\n};\n"]}