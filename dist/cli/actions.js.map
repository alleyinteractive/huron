{"version":3,"sources":["../../src/cli/actions.js"],"names":["initFiles","updateFile","deleteFile","path","require","chalk","data","store","depth","type","Object","prototype","toString","call","newStore","info","files","keys","reduce","prevStore","file","parse","ext","filepath","huron","get","field","section","indexOf","writeSectionTemplate","getSection","base","updateTemplate","dir","name","updatePrototype","console","log","red","extension","updateKSS","deleteTemplate","deletePrototype","deleteKSS","warn"],"mappings":"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","file":"actions.js","sourcesContent":["/** @module cli/actions */\n\n// Imports\nimport { htmlHandler } from './handle-html';\nimport { templateHandler } from './handle-templates';\nimport { kssHandler } from './handle-kss';\nimport { utils } from './utils';\n\n// Requires\nconst path = require('path');\nconst chalk = require('chalk'); // Colorize terminal output\n\n// EXPORTED FUNCTIONS\n\n/**\n * Recursively loop through initial watched files list from Gaze.\n *\n * @param {object} data - object containing directory and file paths\n * @param {object} store - memory store\n * @param {object} huron - huron configuration options\n * @return {object} newStore - map object of entire data store\n */\nexport function initFiles(data, store, depth = 0) {\n  const type = Object.prototype.toString.call(data);\n  let newStore = store;\n  let info;\n  let files;\n\n  switch (type) {\n    case '[object Object]':\n      files = Object.keys(data);\n      newStore = files.reduce(\n        (prevStore, file) => initFiles(data[file], prevStore, depth),\n        newStore\n      );\n      break;\n\n    case '[object Array]':\n      newStore = data.reduce(\n        (prevStore, file) => initFiles(file, prevStore, depth),\n        newStore\n      );\n      break;\n\n    case '[object String]':\n      info = path.parse(data);\n      if (info.ext) {\n        newStore = updateFile(data, store);\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return newStore;\n}\n\n/**\n * Logic for updating and writing file information based on file type (extension)\n *\n * @param {string} filepath - path to updated file. usually passed in from Gaze\n * @param {object} store - memory store\n * @return {object} store - map object of map object of entire data store\n */\nexport function updateFile(filepath, store) {\n  const huron = store.get('config');\n  const file = path.parse(filepath);\n  let field;\n  let section;\n\n  if (- 1 !== filepath.indexOf(huron.get('sectionTemplate'))) {\n    return utils.writeSectionTemplate(filepath, store);\n  }\n\n  switch (file.ext) {\n    // Plain HTML template, external\n    case '.html':\n      section = utils.getSection(file.base, 'markup', store);\n\n      if (section) {\n        return htmlHandler.updateTemplate(filepath, section, store);\n      } else if (\n        - 1 !== file.dir.indexOf('prototypes') &&\n        - 1 !== file.name.indexOf('prototype-')\n      ) {\n        return htmlHandler.updatePrototype(filepath, store);\n      }\n\n      console.log(chalk.red(`Failed to write file: ${file.name}`));\n      break;\n\n    // Handlebars template, external\n    case huron.get('templates').extension:\n    case '.json':\n      field = ('.json' === file.ext) ? 'data' : 'markup';\n      section = utils.getSection(file.base, field, store);\n\n      if (section) {\n        return templateHandler.updateTemplate(filepath, section, store);\n      }\n\n      console.log( // eslint-disable-line no-console\n        chalk.red(`Could not find associated KSS section for ${filepath}`)\n      );\n      break;\n\n    // KSS documentation (default extension is `.css`)\n    // Will also output a template if markup is inline\n    // Note: inline markup does _not_ support handlebars currently\n    case huron.get('kssExtension'):\n      return kssHandler.updateKSS(filepath, store);\n\n    // This should never happen if Gaze is working properly\n    default:\n      return store;\n  }\n\n  return store;\n}\n\n/**\n * Logic for deleting file information and files based on file type (extension)\n *\n * @param {string} filepath - path to updated file. usually passed in from Gaze\n * @param {object} store - memory store\n * @return {object} newStore - map object of map object of entire data store\n */\nexport function deleteFile(filepath, store) {\n  const huron = store.get('config');\n  const file = path.parse(filepath);\n  let field = '';\n  let section = null;\n  let newStore = store;\n\n  switch (file.ext) {\n    // Plain HTML template, external\n    case '.html':\n      section = utils.getSection(file.base, 'markup', store);\n\n      if (section) {\n        newStore = htmlHandler.deleteTemplate(filepath, section, store);\n      } else if (\n        - 1 !== file.dir.indexOf('prototypes') &&\n        - 1 !== file.name.indexOf('prototype-')\n      ) {\n        newStore = htmlHandler.deletePrototype(filepath, store);\n      }\n      break;\n\n    case huron.get('templates').extension:\n    case '.json':\n      field = ('.json' === file.ext) ? 'data' : 'markup';\n      section = utils.getSection(file.base, field, store);\n\n      if (section) {\n        newStore = templateHandler.deleteTemplate(filepath, section, store);\n      }\n      break;\n\n    case huron.get('kssExtension'):\n      section = utils.getSection(filepath, false, store);\n\n      if (section) {\n        newStore = kssHandler.deleteKSS(filepath, section, store);\n      }\n      break;\n\n    default:\n      console.warn(  // eslint-disable-line no-console\n        chalk.red(`Could not delete: ${file.name}`)\n      );\n      break;\n  }\n\n  return newStore;\n}\n"]}