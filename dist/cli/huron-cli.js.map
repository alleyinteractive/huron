{"version":3,"sources":["../../src/cli/huron-cli.js"],"names":["cwd","process","path","require","Gaze","Immutable","chalk","localConfig","join","config","huron","kss","Array","isArray","extensions","kssExtension","templates","extension","map","replace","dataStructure","Map","types","sections","sectionsByPath","sectionsByURI","sorted","prototypes","sectionTemplatePath","referenceDelimiter","gazeWatch","push","resolve","__dirname","sectionTemplate","forEach","sourceDir","gazeDir","slice","gaze","store","watched","production","newStore","on","filepath","console","log","green","blue","newPath","oldPath","red","close"],"mappings":"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","file":"huron-cli.js","sourcesContent":["\n\n// Local imports\nimport { initFiles, updateFile, deleteFile } from './actions';\nimport { requireTemplates, writeStore } from './require-templates';\nimport program from './parse-args';\nimport generateConfig from './generate-config';\nimport startWebpack from './server';\n\n// Modules\nconst cwd = process.cwd(); // Current working directory\nconst path = require('path');\nconst Gaze = require('gaze').Gaze;\nconst Immutable = require('immutable');\nconst chalk = require('chalk'); // Colorize terminal output\n\n// Set vars\nconst localConfig = require(path.join(cwd, program.config)); // eslint-disable-line import/no-dynamic-require\nconst config = generateConfig(localConfig);\n\n/**\n * Huron configuration object\n *\n * @global\n */\nconst huron = config.huron;\n\n// Make sure the kss option is represented as an array\nhuron.kss = Array.isArray(huron.kss) ?\n  huron.kss :\n  [huron.kss];\n\n/**\n * Available file extensions. Extensions should not include the leading '.'\n *\n * @global\n */\nconst extensions = [\n  huron.kssExtension,\n  huron.templates.extension,\n  'html',\n  'json',\n].map((extension) => extension.replace('.', ''));\n\n// Create initial data structure\n/* eslint-disable */\n/**\n * Initial structure for immutable data store\n *\n * @global\n */\nconst dataStructure = Immutable.Map({\n  types: [\n    'template',\n    'data',\n    'description',\n    'section',\n    'prototype',\n    'sections-template',\n  ],\n  config: Immutable.Map(config.huron),\n  sections: Immutable.Map({\n    sectionsByPath: Immutable.Map({}),\n    sectionsByURI: Immutable.Map({}),\n    sorted: {},\n  }),\n  templates: Immutable.Map({}),\n  prototypes: Immutable.Map({}),\n  sectionTemplatePath: '',\n  referenceDelimiter: '.',\n});\n/* eslint-enable */\n\n// Generate watch list for Gaze, start gaze\nconst gazeWatch = [];\n\n// Push KSS source directories and section template to Gaze\ngazeWatch.push(path.resolve(__dirname, huron.sectionTemplate));\nhuron.kss.forEach((sourceDir) => {\n  let gazeDir = sourceDir;\n\n  /* eslint-disable space-unary-ops */\n  if ('/' === sourceDir.slice(-1)) {\n    gazeDir = sourceDir.slice(0, -1);\n  }\n  /* eslint-enable space-unary-ops */\n\n  gazeWatch.push(\n    `${gazeDir}/**/*.+(${extensions.join('|')})`\n  );\n});\n\n/**\n * Gaze instance for watching all files, including KSS, html, hbs/template, and JSON\n *\n * @global\n */\nconst gaze = new Gaze(gazeWatch);\n\n/**\n * Initialize data store with files from gaze and original data structure\n *\n * @global\n */\nconst store = initFiles(gaze.watched(), dataStructure);\n\nrequireTemplates(store);\nwriteStore(store);\n\nif (! program.production) {\n  /** @module cli/gaze */\n  let newStore = store;\n\n  /**\n   * Anonymous handler for Gaze 'changed' event indicating a file has changed\n   *\n   * @callback changed\n   * @listens gaze:changed\n   * @param {string} filepath - absolute path of changed file\n   */\n  gaze.on('changed', (filepath) => {\n    newStore = updateFile(filepath, newStore);\n    console.log(chalk.green(`${filepath} updated!`));\n  });\n\n  /**\n   * Anonymous handler for Gaze 'added' event indicating a file has been added to the watched directories\n   *\n   * @callback added\n   * @listens gaze:added\n   * @param {string} filepath - absolute path of changed file\n   */\n  gaze.on('added', (filepath) => {\n    newStore = updateFile(filepath, newStore);\n    writeStore(newStore);\n    console.log(chalk.blue(`${filepath} added!`));\n  });\n\n  /**\n   * Anonymous handler for Gaze 'renamed' event indicating a file has been renamed\n   *\n   * @callback renamed\n   * @listens gaze:renamed\n   * @param {string} filepath - absolute path of changed file\n   */\n  gaze.on('renamed', (newPath, oldPath) => {\n    newStore = deleteFile(oldPath, newStore);\n    newStore = updateFile(newPath, newStore);\n    writeStore(newStore);\n    console.log(chalk.blue(`${newPath} added!`));\n  });\n\n  /**\n   * Anonymous handler for Gaze 'deleted' event indicating a file has been removed\n   *\n   * @callback deleted\n   * @listens gaze:deleted\n   * @param {string} filepath - absolute path of changed file\n   */\n  gaze.on('deleted', (filepath) => {\n    newStore = deleteFile(filepath, newStore);\n    writeStore(newStore);\n    console.log(chalk.red(`${filepath} deleted`));\n  });\n} else {\n  gaze.close();\n}\n\n// Start webpack or build for production\nstartWebpack(config);\n"]}