exports.id = 0;
exports.modules = {

/***/ "./src/cli/utils.js":
/* no static exports found */
/* all exports used */
/*!**************************!*\
  !*** ./src/cli/utils.js ***!
  \**************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** @module cli/utilities */\n\nconst cwd = process.cwd(); // Current working directory\nconst path = __webpack_require__(/*! path */ 0);\nconst fs = __webpack_require__(/*! fs-extra */ 2);\nconst chalk = __webpack_require__(/*! chalk */ 1); // Colorize terminal output\n\n// Exports\n/* eslint-disable */\nconst utils = exports.utils = {\n  /* eslint-enable */\n\n  /**\n   * Ensure predictable data structure for KSS section data\n   *\n   * @function normalizeSectionData\n   * @param {object} section - section data\n   * @return {object} section data\n   */\n  normalizeSectionData(section) {\n    const data = section.data || section;\n\n    if (!data.referenceURI || '' === data.referenceURI) {\n      data.referenceURI = section.referenceURI();\n    }\n\n    return data;\n  },\n\n  /**\n   * Ensure predictable data structure for KSS section data\n   *\n   * @function writeSectionData\n   * @param {object} store - data store\n   * @param {object} section - section data\n   * @param {string} sectionPath - output destination for section data file\n   */\n  writeSectionData(store, section, sectionPath = false) {\n    let outputPath = sectionPath;\n    let sectionFileInfo;\n\n    if (!outputPath && {}.hasOwnProperty.call(section, 'kssPath')) {\n      sectionFileInfo = path.parse(section.kssPath);\n      outputPath = path.join(sectionFileInfo.dir, `${ sectionFileInfo.name }.json`);\n    }\n\n    // Output section data\n    if (outputPath) {\n      return utils.writeFile(section.referenceURI, 'section', outputPath, JSON.stringify(section), store);\n    }\n\n    console.warn( // eslint-disable-line no-console\n    chalk.red(`Failed to write section data for ${ section.referenceURI }`));\n    return false;\n  },\n\n  /**\n   * Find .json from a template file or vice versa\n   *\n   * @function getTemplateDataPair\n   * @param {object} file - file object from path.parse()\n   * @param {object} section - KSS section data\n   * @return {string} relative path to module JSON file\n   */\n  getTemplateDataPair(file, section, store) {\n    const huron = store.get('config');\n    const kssDir = utils.matchKssDir(file.dir, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(path.resolve(cwd, kssDir), file.dir);\n      const partnerType = '.json' === file.ext ? 'template' : 'data';\n      const partnerExt = '.json' === file.ext ? huron.get('templates').extension : '.json';\n\n      const pairPath = path.join(componentPath, utils.generateFilename(section.referenceURI, partnerType, partnerExt, store));\n\n      return `./${ pairPath }`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Normalize a section title for use as a filename\n   *\n   * @function normalizeHeader\n   * @param {string} header - section header extracted from KSS documentation\n   * @return {string} modified header, lowercase and words separated by dash\n   */\n  normalizeHeader(header) {\n    return header.toLowerCase().replace(/\\s?\\W\\s?/g, '-');\n  },\n\n  /**\n   * Wrap html in required template tags\n   *\n   * @function wrapMarkup\n   * @param {string} content - html or template markup\n   * @param {string} templateId - id of template (should be section reference)\n   * @return {string} modified HTML\n   */\n  wrapMarkup(content, templateId) {\n    return `<dom-module>\n<template id=\"${ templateId }\">\n${ content }\n</template>\n</dom-module>\\n`;\n  },\n\n  /**\n   * Generate a filename based on referenceURI, type and file object\n   *\n   * @function generateFilename\n   * @param  {string} id - The name of the file (with extension).\n   * @param  {string} type - the type of file output\n   * @param  {object} ext - file extension\n   * @param  {store} store - data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  generateFilename(id, type, ext, store) {\n    // Type of file and its corresponding extension(s)\n    const types = store.get('types');\n    const outputExt = '.scss' !== ext ? ext : '.html';\n\n    /* eslint-disable */\n    if (-1 === types.indexOf(type)) {\n      console.log(`Huron data ${ type } does not exist`);\n      return false;\n    }\n    /* eslint-enable */\n\n    return `${ id }-${ type }${ outputExt }`;\n  },\n\n  /**\n   * Copy an HTML file into the huron output directory.\n   *\n   * @function writeFile\n   * @param  {string} id - The name of the file (with extension).\n   * @param  {string} content - The content of the file to write.\n   * @param  {string} type - the type of file output\n   * @param  {object} store - The data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  writeFile(id, type, filepath, content, store) {\n    const huron = store.get('config');\n    const file = path.parse(filepath);\n    const filename = utils.generateFilename(id, type, file.ext, store);\n    const kssDir = utils.matchKssDir(filepath, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(path.resolve(cwd, kssDir), file.dir);\n      const outputRelative = path.join(huron.get('output'), componentPath, `${ filename }`);\n      const outputPath = path.resolve(cwd, huron.get('root'), outputRelative);\n      let newContent = content;\n\n      if ('data' !== type && 'section' !== type) {\n        newContent = utils.wrapMarkup(content, id);\n      }\n\n      try {\n        fs.outputFileSync(outputPath, newContent);\n        console.log(chalk.green(`Writing ${ outputRelative }`)); // eslint-disable-line no-console\n      } catch (e) {\n        console.log(chalk.red(`Failed to write ${ outputRelative }`)); // eslint-disable-line no-console\n      }\n\n      return `./${ outputRelative.replace(`${ huron.get('output') }/`, '') }`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Delete a file in the huron output directory\n   *\n   * @function removeFile\n   * @param  {string} filename - The name of the file (with extension).\n   * @param  {object} store - The data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  removeFile(id, type, filepath, store) {\n    const huron = store.get('config');\n    const file = path.parse(filepath);\n    const filename = utils.generateFilename(id, type, file.ext, store);\n    const kssDir = utils.matchKssDir(filepath, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(path.resolve(cwd, kssDir), file.dir);\n      const outputRelative = path.join(huron.get('output'), componentPath, `${ filename }`);\n      const outputPath = path.resolve(cwd, huron.get('root'), outputRelative);\n\n      try {\n        fs.removeSync(outputPath);\n        console.log(chalk.green(`Removing ${ outputRelative }`)); // eslint-disable-line no-console\n      } catch (e) {\n        console.log( // eslint-disable-line no-console\n        chalk.red(`${ outputRelative } does not exist or cannot be deleted`));\n      }\n\n      return `./${ outputRelative.replace(`${ huron.get('output') }/`, '') }`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Write a template for sections\n   *\n   * @function writeSectionTemplate\n   * @param  {string} filepath - the original template file\n   * @param  {object} store - data store\n   * @return {object} updated store\n   */\n  writeSectionTemplate(filepath, store) {\n    const huron = store.get('config');\n    const sectionTemplate = utils.wrapMarkup(fs.readFileSync(filepath, 'utf8'));\n    const componentPath = './huron-sections/sections.hbs';\n    const output = path.join(cwd, huron.get('root'), huron.get('output'), componentPath);\n\n    // Move huron script and section template into huron root\n    fs.outputFileSync(output, sectionTemplate);\n    console.log(chalk.green(`writing section template to ${ output }`)); // eslint-disable-line no-console\n\n    return store.set('sectionTemplatePath', componentPath);\n  },\n\n  /**\n   * Request for section data based on section reference\n   *\n   * @function writeSectionTemplate\n   * @param {string} search - key on which to match section\n   * @param {field} string - field in which to look to determine section\n   * @param {obj} store - sections memory store\n   */\n  getSection(search, field, store) {\n    const sectionValues = store.getIn(['sections', 'sectionsByPath']).valueSeq();\n    let selectedSection = false;\n\n    if (field) {\n      selectedSection = sectionValues.filter(value => value[field] === search).get(0);\n    } else {\n      selectedSection = store.getIn(['sections', 'sectionsByPath', search]);\n    }\n\n    return selectedSection;\n  },\n\n  /**\n   * Find which configured KSS directory a filepath exists in\n   *\n   * @function matchKssDir\n   * @param {string} filepath - filepath to search for\n   * @param {object} huron - huron configuration\n   * @return {string} kssMatch - relative path to KSS directory\n   */\n  matchKssDir(filepath, huron) {\n    const kssSource = huron.get('kss');\n    /* eslint-disable space-unary-ops */\n    // Include forward slash in our test to make sure we're matchin a directory, not a file extension\n    const kssMatch = kssSource.filter(dir => filepath.includes(`${ dir }/`));\n    /* eslint-enable space-unary-ops */\n\n    if (kssMatch.length) {\n      return kssMatch[0];\n    }\n\n    console.error(chalk.red(`filepath ${ filepath } does not exist in any\n      of the configured KSS directories`));\n    return false;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

};