{"version":3,"sources":["../../src/cli/utils.js"],"names":["cwd","process","path","require","fs","chalk","utils","normalizeSectionData","section","data","referenceURI","writeSectionData","store","sectionPath","outputPath","sectionFileInfo","hasOwnProperty","call","parse","kssPath","join","dir","name","writeFile","JSON","stringify","console","warn","red","getTemplateDataPair","file","huron","get","kssDir","matchKssDir","componentPath","relative","resolve","partnerType","ext","partnerExt","extension","pairPath","generateFilename","normalizeHeader","header","toLowerCase","replace","wrapMarkup","content","templateId","id","type","types","outputExt","indexOf","log","filepath","filename","outputRelative","newContent","outputFileSync","green","e","removeFile","removeSync","writeSectionTemplate","sectionTemplate","readFileSync","output","set","getSection","search","field","sectionValues","getIn","valueSeq","selectedSection","filter","value","kssSource","kssMatch","length","error"],"mappings":"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","file":"utils.js","sourcesContent":["/** @module cli/utilities */\n\nconst cwd = process.cwd(); // Current working directory\nconst path = require('path');\nconst fs = require('fs-extra');\nconst chalk = require('chalk'); // Colorize terminal output\n\n// Exports\n/* eslint-disable */\nexport const utils = {\n/* eslint-enable */\n\n  /**\n   * Ensure predictable data structure for KSS section data\n   *\n   * @function normalizeSectionData\n   * @param {object} section - section data\n   */\n  normalizeSectionData(section) {\n    const data = section.data || section;\n\n    if (! data.referenceURI || '' === data.referenceURI) {\n      data.referenceURI = section.referenceURI();\n    }\n\n    return data;\n  },\n\n  /**\n   * Ensure predictable data structure for KSS section data\n   *\n   * @function writeSectionData\n   * @param {object} store - data store\n   * @param {object} section - section data\n   * @param {string} sectionPath - output destination for section data file\n   */\n  writeSectionData(store, section, sectionPath = false) {\n    let outputPath = sectionPath;\n    let sectionFileInfo;\n\n    if (! outputPath && {}.hasOwnProperty.call(section, 'kssPath')) {\n      sectionFileInfo = path.parse(section.kssPath);\n      outputPath = path.join(\n        sectionFileInfo.dir,\n        `${sectionFileInfo.name}.json`\n      );\n    }\n\n    // Output section data\n    if (outputPath) {\n      return utils.writeFile(\n        section.referenceURI,\n        'section',\n        outputPath,\n        JSON.stringify(section),\n        store\n      );\n    }\n\n    console.warn( // eslint-disable-line no-console\n      chalk.red(`Failed to write section data for ${section.referenceURI}`)\n    );\n    return false;\n  },\n\n  /**\n   * Find .json from a template file or vice versa\n   *\n   * @function getTemplateDataPair\n   * @param {object} file - file object from path.parse()\n   * @param {object} section - KSS section data\n   */\n  getTemplateDataPair(file, section, store) {\n    const huron = store.get('config');\n    const kssDir = utils.matchKssDir(file.dir, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(\n        path.resolve(cwd, kssDir),\n        file.dir\n      );\n      const partnerType = '.json' === file.ext ? 'template' : 'data';\n      const partnerExt = '.json' === file.ext ?\n        huron.get('templates').extension :\n        '.json';\n\n      const pairPath = path.join(\n        componentPath,\n        utils.generateFilename(\n          section.referenceURI,\n          partnerType,\n          partnerExt,\n          store\n        )\n      );\n\n      return `./${pairPath}`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Normalize a section title for use as a filename\n   *\n   * @function normalizeHeader\n   * @param {string} header - section header extracted from KSS documentation\n   */\n  normalizeHeader(header) {\n    return header\n      .toLowerCase()\n      .replace(/\\s?\\W\\s?/g, '-');\n  },\n\n  /**\n   * Wrap html in required template tags\n   *\n   * @function wrapMarkup\n   * @param {string} content - html or template markup\n   * @param {string} templateId - id of template (should be section reference)\n   */\n  wrapMarkup(content, templateId) {\n    return `<dom-module>\n<template id=\"${templateId}\">\n${content}\n</template>\n</dom-module>\\n`;\n  },\n\n  /**\n   * Generate a filename based on referenceURI, type and file object\n   *\n   * @function generateFilename\n   * @param  {string} id - The name of the file (with extension).\n   * @param  {string} type - the type of file output\n   * @param  {object} ext - file extension\n   * @param  {store} store - data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  generateFilename(id, type, ext, store) {\n    // Type of file and its corresponding extension(s)\n    const types = store.get('types');\n    const outputExt = '.scss' !== ext ? ext : '.html';\n\n    /* eslint-disable */\n    if (-1 === types.indexOf(type)) {\n      console.log(`Huron data ${type} does not exist`);\n      return false;\n    }\n    /* eslint-enable */\n\n    return `${id}-${type}${outputExt}`;\n  },\n\n  /**\n   * Copy an HTML file into the huron output directory.\n   *\n   * @function writeFile\n   * @param  {string} id - The name of the file (with extension).\n   * @param  {string} content - The content of the file to write.\n   * @param  {string} type - the type of file output\n   * @param  {object} store - The data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  writeFile(id, type, filepath, content, store) {\n    const huron = store.get('config');\n    const file = path.parse(filepath);\n    const filename = utils.generateFilename(id, type, file.ext, store);\n    const kssDir = utils.matchKssDir(filepath, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(\n        path.resolve(cwd, kssDir),\n        file.dir\n      );\n      const outputRelative = path.join(\n        huron.get('output'),\n        componentPath,\n        `${filename}`\n      );\n      const outputPath = path.resolve(cwd, huron.get('root'), outputRelative);\n      let newContent = content;\n\n      if ('data' !== type && 'section' !== type) {\n        newContent = utils.wrapMarkup(content, id);\n      }\n\n      try {\n        fs.outputFileSync(outputPath, newContent);\n        console.log(chalk.green(`Writing ${outputRelative}`)); // eslint-disable-line no-console\n      } catch (e) {\n        console.log(chalk.red(`Failed to write ${outputRelative}`)); // eslint-disable-line no-console\n      }\n\n      return `./${outputRelative.replace(`${huron.get('output')}/`, '')}`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Delete a file in the huron output directory\n   *\n   * @function removeFile\n   * @param  {string} filename - The name of the file (with extension).\n   * @param  {object} store - The data store\n   * @return {string} Path to output file, relative to ouput dir (can be use in require statements)\n   */\n  removeFile(id, type, filepath, store) {\n    const huron = store.get('config');\n    const file = path.parse(filepath);\n    const filename = utils.generateFilename(id, type, file.ext, store);\n    const kssDir = utils.matchKssDir(filepath, huron);\n\n    if (kssDir) {\n      const componentPath = path.relative(\n        path.resolve(cwd, kssDir),\n        file.dir\n      );\n      const outputRelative = path.join(\n        huron.get('output'),\n        componentPath,\n        `${filename}`\n      );\n      const outputPath = path.resolve(cwd, huron.get('root'), outputRelative);\n\n      try {\n        fs.removeSync(outputPath);\n        console.log(chalk.green(`Removing ${outputRelative}`)); // eslint-disable-line no-console\n      } catch (e) {\n        console.log( // eslint-disable-line no-console\n          chalk.red(`${outputRelative} does not exist or cannot be deleted`)\n        );\n      }\n\n      return `./${outputRelative.replace(`${huron.get('output')}/`, '')}`;\n    }\n\n    return false;\n  },\n\n  /**\n   * Write a template for sections\n   *\n   * @function writeSectionTemplate\n   * @param  {string} filepath - the original template file\n   * @param  {object} store - data store\n   * @return {object} updated store\n   */\n  writeSectionTemplate(filepath, store) {\n    const huron = store.get('config');\n    const sectionTemplate = utils.wrapMarkup(fs.readFileSync(filepath, 'utf8'));\n    const componentPath = './huron-sections/sections.hbs';\n    const output = path.join(\n      cwd,\n      huron.get('root'),\n      huron.get('output'),\n      componentPath\n    );\n\n    // Move huron script and section template into huron root\n    fs.outputFileSync(output, sectionTemplate);\n    console.log(chalk.green(`writing section template to ${output}`)); // eslint-disable-line no-console\n\n    return store.set('sectionTemplatePath', componentPath);\n  },\n\n  /**\n   * Request for section data based on section reference\n   *\n   * @function writeSectionTemplate\n   * @param {string} search - key on which to match section\n   * @param {field} string - field in which to look to determine section\n   * @param {obj} sections - sections memory store\n   */\n  getSection(search, field, store) {\n    const sectionValues = store\n      .getIn(['sections', 'sectionsByPath'])\n      .valueSeq();\n    let selectedSection = false;\n\n    if (field) {\n      selectedSection = sectionValues\n        .filter((value) => value[field] === search)\n        .get(0);\n    } else {\n      selectedSection = store.getIn(['sections', 'sectionsByPath', search]);\n    }\n\n    return selectedSection;\n  },\n\n  /**\n   * Match which configured KSS directory the current file\n   *\n   * @function matchKssDir\n   * @param {string} search - key on which to match section\n   * @param {field} string - field in which to look to determine section\n   * @param {obj} sections - sections memory store\n   */\n  matchKssDir(filepath, huron) {\n    const kssSource = [...huron.get('kss')];\n    /* eslint-disable space-unary-ops */\n    const kssMatch = kssSource.filter((dir) => -1 !== filepath.indexOf(dir));\n    /* eslint-enable space-unary-ops */\n\n    if (kssMatch.length) {\n      return kssMatch[0];\n    }\n\n    console.error(\n      chalk.red(`filepath ${filepath} does not exist in any\n      of the configured KSS directories`)\n    );\n    return false;\n  },\n};\n"]}