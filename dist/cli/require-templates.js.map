{"version":3,"sources":["../../src/cli/require-templates.js"],"names":["path","require","fs","cwd","process","huronScript","readFileSync","resolve","__dirname","requireTemplates","store","huron","get","outputPath","join","requireRegex","RegExp","extension","requirePath","prepend","append","outputFileSync","writeStore","JSON","stringify","toJSON"],"mappings":";;;;;AAAA;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;;AAEA,IAAME,MAAMC,QAAQD,GAAR,EAAZ;AACA,IAAME,cAAcH,GAAGI,YAAH,CAClBN,KAAKO,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CADkB,EAElB,MAFkB,CAApB;;AAKA;;;;;;;;;AASO,IAAMC,8CAAmB,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/D,MAAMC,QAAQD,MAAME,GAAN,CAAU,QAAV,CAAd;AACA,MAAMC,aAAab,KAAKc,IAAL,CAAUX,GAAV,EAAeQ,MAAMC,GAAN,CAAU,MAAV,CAAf,EAAkC,cAAlC,CAAnB;AACA,MAAMG,eAAe,IAAIC,MAAJ,wBACnBL,MAAMC,GAAN,CAAU,WAAV,EAAuBK,SADJ,OAArB;AAGA,MAAMC,wBAAqBP,MAAMC,GAAN,CAAU,QAAV,CAArB,OAAN;;AAEA;AACA,MAAMO,0FAEuBD,WAFvB,gBAE6CH,YAF7C,oOAcEG,WAdF,kCAgBEH,YAhBF,wkBAAN;;AA2CA,MAAMK,+TAAN;;AAeA;AACA;AACAlB,KAAGmB,cAAH,CACErB,KAAKc,IAAL,CAAUD,UAAV,EAAsB,UAAtB,CADF,6BAGAM,OAHA,YAGcd,WAHd,YAGgCe,MAHhC;AAMD,CA3EM;;AA6EP;;;;;;;AAOO,IAAME,kCAAa,SAASA,UAAT,CAAoBZ,KAApB,EAA2B;AACnD,MAAMC,QAAQD,MAAME,GAAN,CAAU,QAAV,CAAd;AACA,MAAMC,aAAab,KAAKc,IAAL,CAAUX,GAAV,EAAeQ,MAAMC,GAAN,CAAU,MAAV,CAAf,EAAkC,cAAlC,CAAnB;;AAEA;AACA;AACAV,KAAGmB,cAAH,CACErB,KAAKc,IAAL,CAAUD,UAAV,EAAsB,gBAAtB,CADF,gDAGqBU,KAAKC,SAAL,CAAed,MAAMe,MAAN,EAAf,CAHrB;AAMD,CAZM","file":"require-templates.js","sourcesContent":["/** @module cli/require-templates */\n\nconst path = require('path');\nconst fs = require('fs-extra');\n\nconst cwd = process.cwd();\nconst huronScript = fs.readFileSync(\n  path.resolve(__dirname, '../web/huron.js'),\n  'utf8'\n);\n\n/**\n * Write code for requiring all generated huron assets\n * Note: prepended and appended code in this file should roughly follow es5 syntax for now,\n *  as it will not pass through the Huron internal babel build nor can we assume the user is\n *  working with babel.\n *\n * @function requireTemplates\n * @param {object} store - memory store\n */\nexport const requireTemplates = function requireTemplates(store) {\n  const huron = store.get('config');\n  const outputPath = path.join(cwd, huron.get('root'), 'huron-assets');\n  const requireRegex = new RegExp(`\\\\.html|\\\\.json|\\\\${\n    huron.get('templates').extension\n  }$`);\n  const requirePath = `'../${huron.get('output')}'`;\n\n  // Initialize templates, js, css and HMR acceptance logic\n  const prepend = `\nvar store = require('./huron-store.js');\nvar assets = require.context(${requirePath}, true, ${requireRegex});\nvar modules = {};\n\nassets.keys().forEach(function(key) {\n  modules[key] = assets(key);\n});\n\nif (module.hot) {\n  module.hot.accept(\n    assets.id,\n    () => {\n      var newAssets = require.context(\n        ${requirePath},\n        true,\n        ${requireRegex}\n      );\n      var newModules = newAssets.keys()\n        .map((key) => {\n          return [key, newAssets(key)];\n        })\n        .filter((newModule) => {\n          return modules[newModule[0]] !== newModule[1];\n        });\n\n      updateStore(require('./huron-store.js'));\n\n      newModules.forEach((module) => {\n        modules[module[0]] = module[1];\n        hotReplace(module[0], module[1], modules);\n      });\n    }\n  );\n\n  module.hot.accept(\n    './huron-store.js',\n    () => {\n      updateStore(require('./huron-store.js'));\n    }\n  );\n}\\n`;\n\n  const append = `\nfunction hotReplace(key, module, modules) {\n  insert.modules = modules;\n  if (key === store.sectionTemplatePath) {\n    insert.cycleSections();\n  } else {\n    insert.inserted = [];\n    insert.loadModule(key, module, false);\n  }\n};\n\nfunction updateStore(newStore) {\n  insert.store = newStore;\n}\\n`;\n\n  // Write the contents of this script.\n  // @todo lint this file.\n  fs.outputFileSync(\n    path.join(outputPath, 'huron.js'),\n    `/*eslint-disable*/\\n\n${prepend}\\n\\n${huronScript}\\n\\n${append}\\n\n/*eslint-enable*/\\n`\n  );\n};\n\n/**\n * Output entire data store to a JS object and handle if any KSS data has changed\n *\n * @function writeStore\n * @param {object} store - memory store\n * @param {string} changed - filepath of changed KSS section, if applicable\n */\nexport const writeStore = function writeStore(store) {\n  const huron = store.get('config');\n  const outputPath = path.join(cwd, huron.get('root'), 'huron-assets');\n\n  // Write updated data store\n  // @todo lint this file.\n  fs.outputFileSync(\n    path.join(outputPath, 'huron-store.js'),\n    `/*eslint-disable*/\n    module.exports = ${JSON.stringify(store.toJSON())}\n    /*eslint-disable*/\\n`\n  );\n};\n\n"]}